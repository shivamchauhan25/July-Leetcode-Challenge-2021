Three Equal Parts

You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.

If it is possible, return any [i, j] with i + 1 < j, such that:

arr[0], arr[1], ..., arr[i] is the first part,
arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and
arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.
All three parts have equal binary values.
If it is not possible, return [-1, -1].

Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.

 

Example 1:

Input: arr = [1,0,1,0,1]
Output: [0,3]
Example 2:

Input: arr = [1,1,0,1,1]
Output: [-1,-1]
Example 3:

Input: arr = [1,1,0,0,1]
Output: [0,2]
 

Constraints:

3 <= arr.length <= 3 * 104
arr[i] is 0 or 1


Solution:
C++:
class Solution {
public:
    vector<int> threeEqualParts(vector<int>& arr) {
        int n=arr.size();
        string s;
        for(int i=0;i<n;i++)s.push_back(arr[i]+'0');
        int count=0;
        for(auto &x:arr)if(x==1)count++;
        if(count==0)return {0,n-1};
        if(count%3!=0)return {-1,-1};
        int target=count/3;
        int index=0;
        int temp_count=0;
        while(arr[index]==0)index++;
        int first_start=index,first_end;
        while(temp_count<target)
        {
            if(arr[index]==1)temp_count++;
            index++;
        }
        first_end=index-1;
        while(arr[index]==0)index++;
        temp_count=0;
        int second_start=index,second_end;
        while(temp_count<target)
        {
            if(arr[index]==1)temp_count++;
            index++;
        }
        second_end=index-1;
        while(arr[index]==0)index++;
        int third_start=index,third_end=n-1;
        string s1=s.substr(first_start,first_end-first_start+1);
        string s2=s.substr(second_start,second_end-second_start+1);
        string s3=s.substr(third_start,third_end-third_start+1);
        if(s1==s2&&s2==s3)return {first_end,second_end+1};
        while(first_end<second_start&&second_end<third_start)
        {
            if(s1==s2&&s2==s3)return{first_end,second_end+1};
            s1.push_back('0');
            s2.push_back('0');
            first_end++;
            second_end++;
        }
        return {-1,-1};
    }
};
